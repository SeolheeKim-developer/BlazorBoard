@*@page "/Candidates"*@
@page "/Candidates/{Page:int?}"
@page "/Candidates/Index/{Page:int?}"
@page "/Candidates/List/{Page:int?}"
@using BlazorBoard.Models.Candidates;

@using Microsoft.EntityFrameworkCore;
@*@inject CandidateAppDbContext _Context*@
@inject IDbContextFactory<CandidateAppDbContext> _ContextFactory
@inject NavigationManager _NavigationManager

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedLocalStorage ProtectedLocalStore

<PageTitle>Candidate List</PageTitle>

<h1>Index</h1>

<p>
    <a href="/Candidates/Create">Create New</a>
</p>

@if (Candidates is null)
{
    <div>Loading...</div>
}
else
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>
                    FirstName
                </th>
                <th>
                    LastName
                </th>
                <th>
                    Is Enrollment
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Candidates)
            {
                <tr>
                <td>
                    @item.FirstName
                </td>
                <td>
                    @item.LastName
                </td>
                <td>
                    <input class="check-box" disabled="disabled" type="checkbox" checked="@item.IsEnrollment"/>
                </td>
                <td>
                    <a href="/Candidates/Edit/@item.Id">Edit</a> |
                        <a href="/Candidates/Details/@item.Id">Details</a> |
                        <a href="/Candidates/Delete/@item.Id">Delete</a>
                </td>
            </tr>
            }
            

        </tbody>
    </table>
    <ul class="pagination">
        <li class="page-item @((Page == 1) ? "disabled" : "")">
            <a class="page-link" href="/Candidates/@(Page -1)">Prev</a>
        </li>
        @for (int i = 0; i < PageCount; i++)
        {
            <li class="page-item @((i == PageIndex) ? "active" : "")">
                <a class="page-link" href="/Candidates/@(i+1)">@(i + 1)</a>
            </li>
        }
        <li class="page-item @((Page == PageCount) ? "disabled" : "")">
            <a class="page-link" href="/Candidates/@(Page +1)">Prev</a>
        </li>
    </ul>
}


@code {
    //model or collection on the current page
    private Candidate[]? Candidates { get; set; }

    public int PageSize { get; set; } = 4;

    [Parameter]
    public int? Page { get; set; } //PageNumber

    public int PageIndex { get; set; }

    public int PageCount { get; set; } = 3;

    public int RecordCount { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Page is null or < 1)
        {
            //Page = 1;
            _NavigationManager.NavigateTo("/Candidates/1");
            return;
        }

        PageIndex = Page.Value - 1;
        //Candidates = await _Context.Candidates.ToArrayAsync();
        using var context = _ContextFactory.CreateDbContext();
        RecordCount = await context.Candidates.CountAsync();
        PageCount = Convert.ToInt32(Math.Ceiling(RecordCount / (double)PageSize));
        if(PageCount == 0)
        {
            PageCount = 1;
        }

        if (Page > PageCount)
        {
            _NavigationManager.NavigateTo($"/Candidates/{PageCount}");
            return;
        }

        

        Candidates = await context.Candidates
            .OrderBy(it => it.FirstName)
            .Skip(PageIndex * PageSize)
            .Take(PageSize)
            .ToArrayAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Page is not null)
        {
            await ProtectedLocalStore.SetAsync("Page", Page.Value);
        }
        
    }
}
