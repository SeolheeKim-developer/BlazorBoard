@page "/Candidates/CandidatesIncomes/Manage"
@inject IDbContextFactory<CandidateAppDbContext> _ContextFactory
@inject NavigationManager _NavigationManager

@using BlazorBoard.Models.Candidates.CandidatesIncomes;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedLocalStorage ProtectedLocalStore

@inject IJSRuntime JSRuntime

@namespace BlazorBoard.Pages.Candidates.CandidatesIncomes

<PageTitle>CandidateIncomes List</PageTitle>
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card">
                <div class="card-header">
                    Gross Annual Income (For Your Household*)
                </div>
                <div class="card-body">
                    <p><i><strong>*NOTE: "Household" refers to yourself and your spouse</strong></i></p>
                    <BlazorBoard.Pages.Candidates.CandidatesIncomes.Components.EditorForm Model="@Model" Busy="@Busy"
                                                                                          OnSubmitCallback="@OnSubmitCallback">
                    </BlazorBoard.Pages.Candidates.CandidatesIncomes.Components.EditorForm>

                    @if (Models is null)
                    {
                        <div>Loading...</div>
                    }
                    else if (Models.Length > 0)
                    {
                        <hr />

                        <div class="row">
                            <div class="col-md-12">
                                <table class="table table-striped table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center">
                                                Source of Income
                                            </th>
                                            <th class="text-center">
                                                Annual Amount
                                            </th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in Models)
                                        {
                                            <tr>
                                                <td>
                                                    @item.Source
                                                </td>
                                                <td class="text-end">
                                                    @item.Amount
                                                </td>
                                                <td class="text-center px-3">
                                                    @*<a href="/Candidates/CandidatesIncomes/Edit/@item.Id" class="btn btn-primary btn-sm">Edit</a>*@ 

                                                    <input type="button" class="btn btn-danger btn-sm" value="Delete"
                                                   @onclick="() => DeleteBy(item)" />
                                                </td>
                                            </tr>
                                        }


                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@*@if (!String.IsNullOrEmpty(StatusMessage))
{
    var statusMessageClass = StatusMessage.StartsWith("Error") ? "danger" : "success";
    <div class="alert alert-@statusMessageClass alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @StatusMessage
    </div>
}*@



    @*<ul class="pagination">
        <li class="page-item @((Page == 1) ? "disabled" : "")">
            <a class="page-link" href="/Candidates/CandidatesIncomes/@(Page -1)">Prev</a>
        </li>
        @{
            int start = PageIndex / (int)5 * 5 + 1;
            int end = (PageIndex / (int)5 + 1) * 5;
        }
        @for (int i = start; i <= end; i++)
        {
            var currentNumber = i;

            if (i > PageCount)
            {
                break;
            }
            <li class="page-item @((i == Page) ? "active" : "")">
                <a class="page-link" href="/Candidates/CandidatesIncomes/@(i)">@(i)</a>
            </li>
        }
        <li class="page-item @((Page == PageCount) ? "disabled" : "")">
            <a class="page-link" href="/Candidates/CandidatesIncomes/@(Page +1)">Prev</a>
        </li>
    </ul>*@


@code {
    [Parameter]
    public string UserId { get; set; } = "3142713f-1702-462d-afea-5a22ee29404c";

    [Parameter]
    public bool UseOtherNames
    {
        get { return blnNames; }
        set
        {
            blnNames = value;
        }
    }

    private bool blnNames = true;

    //model or collection on the current page
    private CandidateIncome[]? Models { get; set; }

    public int PageSize { get; set; } = 10;

    [Parameter]
    public int? Page { get; set; } = 1; //PageNumber

    public int PageIndex { get; set; } = 0;

    public int PageCount { get; set; } = 3;

    public int RecordCount { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await DisplayData();
    }
    private async Task DisplayData()
    {
        if (Page is null or < 1)
        {
            //Page = 1;
            //_NavigationManager.NavigateTo("/Candidates/CandidatesIncomes/1");
            Page = 1;
            return;
        }

        //PageIndex = Page.Value - 1;
        PageIndex = 0;
        //Candidates = await _Context.Candidates.ToArrayAsync();
        using var context = _ContextFactory.CreateDbContext();
        RecordCount = await context.CandidatesIncomes.Where(ui => ui.UserId == UserId).CountAsync();
        PageCount = Convert.ToInt32(Math.Ceiling(RecordCount / (double)PageSize));
        if (PageCount == 0)
        {
            PageCount = 1;
        }




        Models = await context.CandidatesIncomes.Where(ui => ui.UserId == UserId)
            .OrderByDescending(it => it.Id)
            .ToArrayAsync();
    }

    protected async Task DeleteBy(CandidateIncome model)
    {
        bool isDelete = await JSRuntime.InvokeAsync<bool>(
            "confirm", "Are you sure you want to delete this?");
        if (isDelete)
        {
            try
            {
                using var context = _ContextFactory.CreateDbContext();
                context.CandidatesIncomes.Remove(model);
                context.SaveChanges();
            }
            catch (DbUpdateConcurrencyException)
            {
                //Empty
            }

            await DisplayData();
        }



    }

}








@code {
    public CandidateIncome? Model { get; set; }
    public string? StatusMessage { get; set; }
    public bool Busy { get; set; }
    protected override void OnInitialized()
    {
        //Model = new Candidate { FirstName = "SH", LastName = "Kim", IsEnrollment = true };
        Model = new();
    }

    protected async Task FormSubmit()
    {
        if (Busy)
        {
            return;
        }
        Busy = true;
        try
        {
            if (Model is not null)
            {

                using var ctx = _ContextFactory.CreateDbContext();
                Model.UserId = UserId;
                ctx.CandidatesIncomes.Add(Model);
                ctx.SaveChanges();

                //await Task.Delay(5000);



                StatusMessage = "Success";
            }
        }
        catch (Exception ex)
        {

            StatusMessage = $"Error: {ex.Message}";
        }
        finally
        {
            Busy = false;
            //await DisplayData();
            Model = new();
            //StateHasChanged();
            await DisplayData();
        }

    }

    protected void HandleInvalidSubmit()
    {
        StatusMessage = "";
    }

    protected async Task OnSubmitCallback(bool isValid)
    {
        if (isValid)
        {
            await FormSubmit();
        }
        else
        {
            HandleInvalidSubmit();
        }
    }
}
