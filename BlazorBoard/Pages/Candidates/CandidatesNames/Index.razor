@*@page "/Candidates"*@
@page "/Candidates/CandidatesNames/{Page:int?}"

@*@inject CandidateAppDbContext _Context*@
@inject IDbContextFactory<CandidateAppDbContext> _ContextFactory
@inject NavigationManager _NavigationManager

@using BlazorBoard.Models.Candidates.CandidatesNames;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedLocalStorage ProtectedLocalStore

@inject IJSRuntime JSRuntime

<PageTitle>Candidate List</PageTitle>

<h1>Candidate List</h1>

<p>
    <a href="/Candidates/CandidatesNames/Create">Create New</a>
</p>

@if (Models is null)
{
    <div>Loading...</div>
}
else
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>
                    FirstName
                </th>
                <th>
                    LastName
                </th>
                <th>
                    MiddleName
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Models)
            {
                <tr>
                    <td>
                        @item.FirstName
                    </td>
                    <td>
                        @item.LastName
                    </td>
                    <td>
                        @item.MiddleName
                    </td>
                    <td>
                        <a href="/Candidates/CandidatesNames/Edit/@item.Id" class="btn btn-primary btn-sm">Edit</a> |

                        <input type="button" class="btn btn-danger btn-sm" value="Delete"
                       @onclick="() => DeleteBy(item)" />
                    </td>
                </tr>
            }


        </tbody>
    </table>
    <ul class="pagination">
        <li class="page-item @((Page == 1) ? "disabled" : "")">
            <a class="page-link" href="/Candidates/CandidatesNames/@(Page -1)">Prev</a>
        </li>
        @{
            int start = PageIndex / (int)5 * 5 + 1;
            int end = (PageIndex / (int)5 + 1) * 5;
        }
        @for (int i = start; i <= end; i++)
        {
            var currentNumber = i;

            if (i > PageCount)
            {
                break;
            }
            <li class="page-item @((i == Page) ? "active" : "")">
                <a class="page-link" href="/Candidates/CandidatesNames/@(i)">@(i)</a>
            </li>
        }
        <li class="page-item @((Page == PageCount) ? "disabled" : "")">
            <a class="page-link" href="/Candidates/CandidatesNames/@(Page +1)">Prev</a>
        </li>
    </ul>
}


@code {
    //model or collection on the current page
    private CandidateName[]? Models { get; set; }

    public int PageSize { get; set; } = 4;

    [Parameter]
    public int? Page { get; set; } //PageNumber

    public int PageIndex { get; set; }

    public int PageCount { get; set; } = 3;

    public int RecordCount { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await DisplayData();
    }
    private async Task DisplayData()
    {
        if (Page is null or < 1)
        {
            //Page = 1;
            _NavigationManager.NavigateTo("/Candidates/CandidatesNames/1");
            return;
        }

        PageIndex = Page.Value - 1;
        //Candidates = await _Context.Candidates.ToArrayAsync();
        using var context = _ContextFactory.CreateDbContext();
        RecordCount = await context.Candidates.CountAsync();
        PageCount = Convert.ToInt32(Math.Ceiling(RecordCount / (double)PageSize));
        if (PageCount == 0)
        {
            PageCount = 1;
        }

        if (Page > PageCount)
        {
            _NavigationManager.NavigateTo($"/Candidates/CandidatesNames/{PageCount}");
            return;
        }



        Models = await context.CandidatesNames
            .OrderBy(it => it.FirstName)
            .Skip(PageIndex * PageSize)
            .Take(PageSize)
            .ToArrayAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Page is not null)
        {
            await ProtectedLocalStore.SetAsync("Page", Page.Value);
        }

    }
    protected async Task DeleteBy(CandidateName model)
    {
        bool isDelete = await JSRuntime.InvokeAsync<bool>(
            "confirm", "Are you sure you want to delete this?");
        if (isDelete)
        {
            try
            {
                using var context = _ContextFactory.CreateDbContext();
                context.CandidatesNames.Remove(model);
                await context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                //Empty
            }
            
            await DisplayData();
        }



    }

}
