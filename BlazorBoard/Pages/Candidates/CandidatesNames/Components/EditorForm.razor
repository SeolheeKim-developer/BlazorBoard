@namespace BlazorBoard.Pages.Candidates.CandidatesNames.Components
@using BlazorBoard.Models.Candidates.CandidatesNames;

@if (Model is not null)
{
    <EditForm Model="@Model"
          OnValidSubmit="FormSubmit"
          OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <label class="control-label" for="txtFirstName">FirstName</label>
                    @*<input class="form-control" type="text" data-val="true" data-val-length="The field FirstName must be a string with a maximum length of 50." data-val-length-max="50" data-val-required="The FirstName field is required." id="FirstName" maxlength="50" name="FirstName" value="" />*@
                    <InputText @bind-Value="Model.FirstName" id="txtFirstName" class="form-control" placeholder="Enter FirstName" />
                    @*<span class="text-danger field-validation-valid" data-valmsg-for="FirstName" data-valmsg-replace="true"></span>*@
                    <ValidationMessage For="() => Model.FirstName" />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label class="control-label" for="txtLastName">LastName</label>
                    @*<input class="form-control" type="text" data-val="true" data-val-length="The field LastName must be a string with a maximum length of 50." data-val-length-max="50" data-val-required="The LastName field is required." id="LastName" maxlength="50" name="LastName" value="" />*@
                    <InputText @bind-Value="Model.LastName" id="txtLastName" class="form-control" placeholder="Enter LastName" />
                    @*<span class="text-danger field-validation-valid" data-valmsg-for="LastName" data-valmsg-replace="true"></span>*@
                    <ValidationMessage For="@(() => Model.LastName)" />
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label" for="txtMiddleName">MiddleName</label>
                    @*<input class="form-control" type="text" data-val="true" data-val-length="The field LastName must be a string with a maximum length of 50." data-val-length-max="50" data-val-required="The LastName field is required." id="LastName" maxlength="50" name="LastName" value="" />*@
                    <InputText @bind-Value="Model.MiddleName" id="txtMiddleName" class="form-control" placeholder="Enter MiddleName" />
                    @*<span class="text-danger field-validation-valid" data-valmsg-for="LastName" data-valmsg-replace="true"></span>*@
                    <ValidationMessage For="@(() => Model.MiddleName)" />
                </div>
            </div>
            <div class="col-md-1">
                <div class="form-group">
                    @if (IsEdit)
                    {
                        <input type="submit" value="Edit" class="btn btn-primary" disabled="@Busy" />
                        <input type="button" value="Cancel" class="btn btn-secondary" disabled="@Busy"
                       @onclick="HandleCancel" />

                    }
                    else
                    {
                        <input type="submit" value="Create" class="btn btn-primary" disabled="@Busy" />

                    }
                </div>
            </div>
        </div>
    </EditForm>
}
@code {
    [Parameter]
    public CandidateName? Model { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmitCallback { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    protected async Task FormSubmit()
    {
        if (OnSubmitCallback.HasDelegate)
        {
            await OnSubmitCallback.InvokeAsync(true);
        }

    }

    protected async Task HandleInvalidSubmit()
    {
        if (OnSubmitCallback.HasDelegate)
        {
            await OnSubmitCallback.InvokeAsync(false);
        }
    }
    [Parameter]
    public EventCallback OnCancelCallback { get; set; }

    protected async Task HandleCancel()
    {
        if (OnCancelCallback.HasDelegate)
        {
            await OnCancelCallback.InvokeAsync();
        }
    }
}