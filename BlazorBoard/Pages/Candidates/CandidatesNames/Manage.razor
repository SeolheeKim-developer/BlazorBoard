@page "/Candidates/CandidatesNames/Manage"
@inject IDbContextFactory<CandidateAppDbContext> _ContextFactory
@inject NavigationManager _NavigationManager

@using BlazorBoard.Models.Candidates.CandidatesNames;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedLocalStorage ProtectedLocalStore

@inject IJSRuntime JSRuntime

@namespace BlazorBoard.Pages.Candidates.CandidatesNames

<PageTitle>CandidateNames List</PageTitle>

@*@if (!String.IsNullOrEmpty(StatusMessage))
{
    var statusMessageClass = StatusMessage.StartsWith("Error") ? "danger" : "success";
    <div class="alert alert-@statusMessageClass alert-dismissible" role="alert">
        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        @StatusMessage
    </div>
}*@

<div class="row">
    <div id="pnlNames">
        <span class="fw-bold">Have you ever used or been known by any other name(s)?</span>
        <div class="form-check form-check-inline">
            <input type="radio" value="Yes" name="optNames" id="namesYes"
                   checked="@(blnNames ==true)"
                   @onchange="@(() => {blnNames = !blnNames;})" />
            <label for="namesYes">Yes</label>
        </div>
        <div class="form-check form-check-inline">
            <input type="radio" value="No" name="optNames" id="namesNo"
                   checked="@(blnNames ==false)"
                   @onchange="@(() => {blnNames = !blnNames;})" />
            <label for="namesNo">No</label>
        </div>
    </div>
</div>
@if (blnNames)
{
    <div class="row">
        <div class="col-md-12">
            If YES, list the additional name(s) below and specify dates of use for each name (include maiden name, aliases, nicknames, other name changes, legal or otherwise).
        </div>
    </div>



    <div class="row">
        <div class="col-md-12">

            <BlazorBoard.Pages.Candidates.CandidatesNames.Components.EditorForm Model="@Model" Busy="@Busy"
                                                                            OnSubmitCallback="@OnSubmitCallback">
            </BlazorBoard.Pages.Candidates.CandidatesNames.Components.EditorForm>


        </div>
    </div>
}
@if (Models is null)
{
    <div>Loading...</div>
}
else if (Models.Length > 0)
{
    <hr />

    <div class="row">
        <div class="col-md-12">
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>
                            First Name
                        </th>
                        <th>
                            Last Name
                        </th>
                        <th>
                            Middle Name
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Models)
                    {
                        <tr>
                            <td>
                                @item.FirstName
                            </td>
                            <td>
                                @item.LastName
                            </td>
                            <td>
                                @item.MiddleName
                            </td>
                            <td class="text-center">
                                @*<a href="/Candidates/CandidatesNames/Edit/@item.Id" class="btn btn-primary btn-sm">Edit</a>*@ |

                                <input type="button" class="btn btn-danger btn-sm" value="Delete"
                               @onclick="() => DeleteBy(item)" />
                            </td>
                        </tr>
                    }


                </tbody>
            </table>
        </div>
    </div>
    @*<ul class="pagination">
        <li class="page-item @((Page == 1) ? "disabled" : "")">
            <a class="page-link" href="/Candidates/CandidatesNames/@(Page -1)">Prev</a>
        </li>
        @{
            int start = PageIndex / (int)5 * 5 + 1;
            int end = (PageIndex / (int)5 + 1) * 5;
        }
        @for (int i = start; i <= end; i++)
        {
            var currentNumber = i;

            if (i > PageCount)
            {
                break;
            }
            <li class="page-item @((i == Page) ? "active" : "")">
                <a class="page-link" href="/Candidates/CandidatesNames/@(i)">@(i)</a>
            </li>
        }
        <li class="page-item @((Page == PageCount) ? "disabled" : "")">
            <a class="page-link" href="/Candidates/CandidatesNames/@(Page +1)">Prev</a>
        </li>
    </ul>*@
}


@code {
    private bool blnNames = true;

    //model or collection on the current page
    private CandidateName[]? Models { get; set; }

    public int PageSize { get; set; } = 10;

    [Parameter]
    public int? Page { get; set; } = 1; //PageNumber

    public int PageIndex { get; set; } = 0;

    public int PageCount { get; set; } = 3;

    public int RecordCount { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await DisplayData();
    }
    private async Task DisplayData()
    {
        if (Page is null or < 1)
        {
            //Page = 1;
            //_NavigationManager.NavigateTo("/Candidates/CandidatesNames/1");
            Page = 1;
            return;
        }

        //PageIndex = Page.Value - 1;
        PageIndex = 0;
        //Candidates = await _Context.Candidates.ToArrayAsync();
        using var context = _ContextFactory.CreateDbContext();
        RecordCount = await context.Candidates.CountAsync();
        PageCount = Convert.ToInt32(Math.Ceiling(RecordCount / (double)PageSize));
        if (PageCount == 0)
        {
            PageCount = 1;
        }




        Models = await context.CandidatesNames
            .OrderBy(it => it.FirstName)
            .ToArrayAsync();
    }

    protected async Task DeleteBy(CandidateName model)
    {
        bool isDelete = await JSRuntime.InvokeAsync<bool>(
            "confirm", "Are you sure you want to delete this?");
        if (isDelete)
        {
            try
            {
                using var context = _ContextFactory.CreateDbContext();
                context.CandidatesNames.Remove(model);
                context.SaveChanges();
            }
            catch (DbUpdateConcurrencyException)
            {
                //Empty
            }

            await DisplayData();
        }



    }

}








@code {
    public CandidateName? Model { get; set; }
    public string? StatusMessage { get; set; }
    public bool Busy { get; set; }
    protected override void OnInitialized()
    {
        //Model = new Candidate { FirstName = "SH", LastName = "Kim", IsEnrollment = true };
        Model = new();
    }

    protected async Task FormSubmit()
    {
        if (Busy)
        {
            return;
        }
        Busy = true;
        try
        {
            if (Model is not null)
            {

                using var ctx = _ContextFactory.CreateDbContext();
                Model.UserId = "aaaa";
                ctx.CandidatesNames.Add(Model);
                ctx.SaveChanges();

                //await Task.Delay(5000);



                StatusMessage = "Success";
            }
        }
        catch (Exception ex)
        {

            StatusMessage = $"Error: {ex.Message}";
        }
        finally
        {
            Busy = false;
            //await DisplayData();
            Model = new();
            //StateHasChanged();
            await DisplayData();
        }

    }

    protected void HandleInvalidSubmit()
    {
        StatusMessage = "";
    }

    protected async Task OnSubmitCallback(bool isValid)
    {
        if (isValid)
        {
            await FormSubmit();
        }
        else
        {
            HandleInvalidSubmit();
        }
    }
}
